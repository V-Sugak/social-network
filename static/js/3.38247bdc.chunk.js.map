{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsItem/DialogsItem.module.css","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/common/Forms/PostForm.tsx"],"names":["module","exports","DialogsItem","props","className","s","dialog","to","id","activeClassName","active","name","Message","message","Dialogs","dialogElement","state","dialogsItem","map","d","messageElement","messages","m","dialogs","newMessage","PostForm","onSubmit","addMessage","buttonName","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToPropsForRedirect","isAuth","auth","DialogsContainer","this","React","Component","compose","connect","dialogsPage","addMessageAC","restProps","formik","useFormik","initialValues","value","validate","values","errors","resetForm","handleSubmit","getFieldProps","type","touched","error"],"mappings":"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","file":"static/js/3.38247bdc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3ckGd\",\"dialogsItem\":\"Dialogs_dialogsItem__3m-1p\",\"messages\":\"Dialogs_messages__2ocpO\",\"newMessage\":\"Dialogs_newMessage__3L8HV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__mUvXI\",\"active\":\"DialogsItem_active__1Lhsv\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from \"./DialogsItem.module.css\"\r\n\r\ntype DialogItemPropsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport const DialogsItem = (props: DialogItemPropsType) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={s.active}> {props.name} </NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from \"./Message.module.css\"\r\n\r\ntype MessagePropsType = {\r\n    message:string\r\n};\r\n\r\nexport const Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}> {props.message} </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogsItem} from \"./DialogsItem/DialogsItem\";\r\nimport {Message} from './Message/Message';\r\nimport {PostForm} from \"../common/Forms/PostForm\";\r\nimport {StateDialogsType} from \"../../redux/dialogs-reducer\";\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    let dialogElement = props.state.dialogsItem.map(d => <DialogsItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messageElement = props.state.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    return (<div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElement}</div>\r\n                <div className={s.newMessage}>\r\n                    <PostForm onSubmit={props.addMessage} buttonName={\"Send\"}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype DialogsPropsType = {\r\n    state: StateDialogsType\r\n    addMessage: (value: string) => void\r\n}","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../redux/redux-store\";\r\n\r\nconst mapStateToPropsForRedirect = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) {\r\n            return <Redirect to={\"/login\"}/>\r\n        }\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    let WrapperComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return WrapperComponent\r\n}\r\n\r\n//types\r\ntype MapStateToPropsType = { isAuth: boolean }","import React, {ComponentType} from \"react\";\r\nimport {addMessageAC, StateDialogsType} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass DialogsContainer extends React.Component<DialogsContainerPropsType> {\r\n    render() {\r\n        return <Dialogs\r\n            {...this.props}\r\n            state={this.props.state}\r\n            addMessage={this.props.addMessage}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        state: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {addMessage: addMessageAC,}),\r\n    withAuthRedirect\r\n)(DialogsContainer)\r\n\r\n\r\n//types\r\ntype mapStateToPropsType = {\r\n    state: StateDialogsType\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addMessage: (value: string) => void\r\n}\r\nexport type DialogsContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport s from \"../../Login/Login.module.css\";  // надо сделать свой css\r\n\r\nexport const PostForm = (props: PostFormPropsType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            value: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (values.value && values.value.length > 10) {\r\n                errors.value = 'Max length is 10 symbols';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: () => {\r\n            props.onSubmit(formik.values.value)\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <div>\r\n           <textarea\r\n               {...formik.getFieldProps('value')}\r\n           />\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\">{props.buttonName}</button>\r\n            {formik.touched.value && formik.errors.value && <div className={s.error}>{formik.errors.value}</div>}\r\n        </div>\r\n    </form>\r\n}\r\n\r\n//types\r\ntype PostFormPropsType = {\r\n    buttonName: string\r\n    onSubmit: (value: string) => void\r\n}\r\ntype FormikErrorType = {\r\n    value?: string\r\n}"],"sourceRoot":""}