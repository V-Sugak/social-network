{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/Forms/PostForm.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","autoFocus","type","value","onChange","e","currentTarget","onBlur","updateUserStatus","onDoubleClick","ProfileInfo","profile","className","s","descriptionBlock","photo","src","photos","large","userPhoto","statusBlock","name","fullName","aboutMe","checked","lookingForAJob","Preloader","Post","item","alt","message","likeCount","MyPosts","React","memo","console","log","postsElements","posts","map","p","likesCount","id","postsBlock","PostForm","buttonName","onSubmit","addPost","MyPostsContainer","connect","state","profilePage","addPostAC","Profile","ProfileContainer","userId","Number","this","match","params","authorizedUserId","history","push","getUsersProfile","getUserStatus","isFetching","Component","compose","app","auth","isAuth","getUserProfileTC","getUserStatusTC","updateUserStatusTC","withRouter","formik","useFormik","initialValues","validate","values","errors","length","resetForm","handleSubmit","getFieldProps","touched","error"],"mappings":"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","file":"static/js/4.55752b36.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1bzl3\",\"statusBlock\":\"ProfileInfo_statusBlock__1SR2F\",\"name\":\"ProfileInfo_name__Zkq0T\",\"photo\":\"ProfileInfo_photo__uqaTe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3iT9U\",\"posts\":\"MyPosts_posts__3m4x2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__XfNqU\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n    const deactivatedEditMode = () => {\r\n        props.updateUserStatus(status)\r\n        setEditMode(false)\r\n    }\r\n    const activatedEditMode = () => setEditMode(true)\r\n\r\n    return <div>\r\n        {editMode ?\r\n            <div>\r\n                <input autoFocus={true} type=\"text\"\r\n                       value={status}\r\n                       onChange={onChangeHandler}\r\n                       onBlur={deactivatedEditMode}\r\n                />\r\n            </div>\r\n            : <div>\r\n                <span onDoubleClick={activatedEditMode}>{props.status || \"No status\"}</span>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\n//types\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatus/ProfileStatusWithHooks\";\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.photo}>\r\n                    <img src={props.profile.photos.large !== null ? props.profile.photos.large : userPhoto}/>\r\n                </div>\r\n                <div>\r\n                    <div className={s.statusBlock}>\r\n                        <span className={s.name}>{props.profile.fullName}</span>\r\n                        <ProfileStatusWithHooks updateUserStatus={props.updateUserStatus} status={props.status}/>\r\n                    </div>\r\n                    <div>\r\n                        <b>About me: </b> {props.profile.aboutMe}\r\n                    </div>\r\n                    <div>\r\n                        <b>Looking for a job: </b>\r\n                        <input type={'checkbox'} checked={props.profile.lookingForAJob}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype ProfileInfoPropsType = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://bigpicture.ru/wp-content/uploads/2019/11/mixedblood00.jpg\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                {props.likeCount} like\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {PostForm} from \"../../common/Forms/PostForm\";\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    console.log('MyPosts')\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likeCount={p.likesCount}/>)\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <PostForm buttonName={\"Add post\"} onSubmit={props.addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport {addPostAC, PostType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../redux/redux-store\";\r\n\r\nconst mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost: addPostAC,\r\n})(MyPosts);\r\n\r\n//types\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPost: (value: string) => void\r\n}\r\nexport type MyPostsPropsType = mapStateToPropsType & mapDispatchToPropsType;","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                status={props.status}\r\n                profile={props.profile}\r\n                updateUserStatus={props.updateUserStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\nexport type ProfilePropsType = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}","import React, {ComponentType} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {UserProfileType, getUserProfileTC, getUserStatusTC, updateUserStatusTC} from \"../../redux/profile-reducer\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            if (this.props.authorizedUserId) {\r\n                if (!userId) {\r\n                    userId = this.props.authorizedUserId\r\n                }\r\n            } else {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUsersProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {this.props.isFetching ? <Preloader/> : <Profile\r\n                status={this.props.status}\r\n                profile={this.props.profile}\r\n                updateUserStatus={this.props.updateUserStatus}\r\n            />}\r\n        </div>\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isFetching: state.app.isFetching,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n};\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUsersProfile: getUserProfileTC,\r\n        getUserStatus: getUserStatusTC,\r\n        updateUserStatus: updateUserStatusTC,\r\n    }),\r\n    withRouter,\r\n)(ProfileContainer);\r\n\r\n//types\r\ntype MapStatePropsType = {\r\n    profile: UserProfileType | null\r\n    isFetching: boolean\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n};\r\ntype MapDispatchProps = {\r\n    getUsersProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n};\r\ntype PathParamsType = {\r\n    userId: string\r\n};\r\ntype ProfileContainerType = MapStatePropsType & MapDispatchProps;\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerType;\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport s from \"../../Login/Login.module.css\";  // надо сделать свой css\r\n\r\nexport const PostForm = (props: PostFormPropsType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            value: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (values.value && values.value.length > 10) {\r\n                errors.value = 'Max length is 10 symbols';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: () => {\r\n            props.onSubmit(formik.values.value)\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <div>\r\n           <textarea\r\n               {...formik.getFieldProps('value')}\r\n           />\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\">{props.buttonName}</button>\r\n            {formik.touched.value && formik.errors.value && <div className={s.error}>{formik.errors.value}</div>}\r\n        </div>\r\n    </form>\r\n}\r\n\r\n//types\r\ntype PostFormPropsType = {\r\n    buttonName: string\r\n    onSubmit: (value: string) => void\r\n}\r\ntype FormikErrorType = {\r\n    value?: string\r\n}"],"sourceRoot":""}